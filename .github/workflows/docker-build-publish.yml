name: Build and Publish Docker Image

on:
  workflow_call:
    inputs:
      build_args:
        description: "Build args to pass to docker build"
        required: false
        type: string
        default: ""
      repo_name:
        description: "Name of the repository"
        required: true
        type: string
      tag:
        description: "Tag to use for the image"
        required: false
        type: string
        default: ""
      dockerfile:
        description: "Dockerfile to use"
        required: false
        type: string
        default: "Dockerfile"
      push:
        description: "Push the image to the registry"
        required: false
        type: boolean
        default: true
      dockerhub:
        description: "Push the image to Docker Hub"
        required: false
        type: boolean
        default: true
      ghcr:
        description: "Push the image to GitHub Container Registry"
        required: false
        type: boolean
        default: true
      latest_image:
        description: "Push the image with the latest tag"
        required: false
        type: boolean
        default: true
      update_description:
        description: "Update the description of the image on Docker Hub"
        required: false
        type: boolean
        default: true
      platforms:
        description: "Platforms to build the image for"
        required: false
        type: string
        default: "linux/amd64,linux/arm64"
    secrets:
      DOCKERHUB_USERNAME:
        description: "DockerHub username"
        required: true
      DOCKERHUB_TOKEN:
        description: "DockerHub token with push permissions"
        required: true
      DOCKERHUB_PASSWORD:
        description: "DockerHub password"
        required: true

jobs:
  docker-build:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Check Vars
        run: |
          # if both ghcr and dockerhub are false, fail
          if [ "${{ inputs.ghcr }}" = "false" ] && [ "${{ inputs.dockerhub }}" = "false" ]; then
            echo "Both ghcr and dockerhub are false, exiting"
            exit 1
          fi

          # if tag is not set and latest_image is false, fail
          if [ -z "${{ inputs.tag }}" ] && [ "${{ inputs.latest_image }}" = "false" ]; then
            echo "Tag is not set and latest_image is false, exiting"
            exit 1
          fi
      - name: Checkout current repo
        uses: actions/checkout@v3
      - name: Login to GitHub Container Registry
        # only login to ghcr if ghcr is true
        if: ${{ inputs.ghcr }}
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        # only login to dockerhub if dockerhub is true
        if: ${{ inputs.dockerhub }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set ENV Variables
        run: |
          # Generate Build Env Vars, BUILD_DATE, GIT_SHA, GIT_REF
          echo "BUILD_DATE=$(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
          echo "GIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV
          echo "GIT_REF=$(git symbolic-ref -q --short HEAD || git describe --tags --exact-match)" >> $GITHUB_ENV

          # Generate Tag Env Vars
          TAGS=""

          # if dockerhub is true, add dockerhub tags
          if [ "${{ inputs.dockerhub }}" = "true" ]; then

            # if latest_image is true, add latest tag
            if [ "${{ inputs.latest_image }}" = "true" ]; then
              TAGS+="docker.io/${{ inputs.repo_name }}:latest,"
            fi

            # if tag is set, add tag
            if [ "${{ inputs.tag }}" != "" ]; then
              TAGS+="docker.io/${{ inputs.repo_name }}:${{ inputs.tag }},"
            fi
          fi

          # if ghcr is true, add ghcr tags
          if [ "${{ inputs.ghcr }}" = "true" ]; then

            # if latest_image is true, add latest tag
            if [ "${{ inputs.latest_image }}" = "true" ]; then
              TAGS+="ghcr.io/${{ inputs.repo_name }}:latest,"
            fi

            # if tag is set, add tag
            if [ "${{ inputs.tag }}" != "" ]; then

              # if tag has spaces, add each tag
              if [ "${{ inputs.tag }}" != "" ]; then
                TAGS+="ghcr.io/${{ inputs.repo_name }}:${{ inputs.tag }},"
              fi
            fi
          fi

          # trim the last comma and set the env var
          echo "TAGS=${TAGS::${#TAGS}-1}" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          # build for multiple platforms, by default only linux/amd64 and linux/arm64
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ env.TAGS }}
          build-args: ${{ inputs.build_args }}
          labels: |-
            org.opencontainers.image.authors=${{ github.repository_owner }}
            org.opencontainers.image.created=${{ env.BUILD_DATE }}
            org.opencontainers.image.description=Created from commit ${{ env.GIT_SHA }} and ref ${{ env.GIT_REF }}
            org.opencontainers.image.ref.name=${{ env.GIT_REF }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=https://github.com/${{ inputs.repo_name }}
            org.opencontainers.image.version=${{ inputs.tag }}

  update-dockerhub-description:
    name: Update DockerHub Description
    # only run if update_description is true and dockerhub is true
    if: ${{ inputs.update_description && inputs.dockerhub }}
    needs: docker-build
    uses: divkix/reusable-workflows/.github/workflows/update-dockerhub-description.yml@main
    secrets:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
